<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
    <file path="/Users/syradar/repos/yxans-klagan/src/functions/utils.functions.test.ts">
        <testCase name="numberToBooleans should return [ false ] for 1" duration="2"/>
        <testCase name="numberToBooleans should return [ false, false ] for 2" duration="1"/>
        <testCase name="numberToBooleans should return [] for 0" duration="0"/>
        <testCase name="numberToBooleans should return [] for -1" duration="0"/>
        <testCase name="numberToBooleans should return [] for null" duration="0">
            <failure message="TypeError: Both arguments to range must be numbers"><![CDATA[TypeError: Both arguments to range must be numbers
    at range (/Users/syradar/repos/yxans-klagan/node_modules/ramda/src/range.js:30:11)
    at /Users/syradar/repos/yxans-klagan/node_modules/ramda/src/internal/_curry2.js:26:18
    at f1 (/Users/syradar/repos/yxans-klagan/node_modules/ramda/src/internal/_curry1.js:19:17)
    at /Users/syradar/repos/yxans-klagan/node_modules/ramda/src/internal/_pipe.js:3:27
    at /Users/syradar/repos/yxans-klagan/node_modules/ramda/src/internal/_arity.js:11:19
    at /Users/syradar/repos/yxans-klagan/src/functions/utils.functions.test.ts:13:36
    at Object.<anonymous> (/Users/syradar/repos/yxans-klagan/node_modules/jest-each/build/bind.js:79:13)
    at Promise.then.completed (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/utils.js:289:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/utils.js:222:10)
    at _callCircusTest (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:248:40)
    at _runTest (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:184:3)
    at _runTestsForDescribeBlock (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:86:9)
    at _runTestsForDescribeBlock (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:81:9)
    at run (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:26:3)
    at runAndTransformResultsToJestFormat (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:120:21)
    at jestAdapter (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/syradar/repos/yxans-klagan/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/syradar/repos/yxans-klagan/node_modules/jest-runner/build/runTest.js:444:34)]]></failure>
        </testCase>
        <testCase name="numberToBooleans should throw error for NaN" duration="1">
            <failure message="Error: expect(received).toThrowError()"><![CDATA[Error: expect(received).toThrowError()

Received function did not throw
    at /Users/syradar/repos/yxans-klagan/src/functions/utils.functions.test.ts:21:53
    at Object.<anonymous> (/Users/syradar/repos/yxans-klagan/node_modules/jest-each/build/bind.js:79:13)
    at Promise.then.completed (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/utils.js:289:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/utils.js:222:10)
    at _callCircusTest (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:248:40)
    at _runTest (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:184:3)
    at _runTestsForDescribeBlock (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:86:9)
    at _runTestsForDescribeBlock (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:81:9)
    at run (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/run.js:26:3)
    at runAndTransformResultsToJestFormat (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:120:21)
    at jestAdapter (/Users/syradar/repos/yxans-klagan/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/syradar/repos/yxans-klagan/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/syradar/repos/yxans-klagan/node_modules/jest-runner/build/runTest.js:444:34)]]></failure>
        </testCase>
        <testCase name="validNumber should return true for -1" duration="0"/>
        <testCase name="validNumber should return true for 0" duration="0"/>
        <testCase name="validNumber should return true for 1" duration="0"/>
        <testCase name="validNumber should return false for Infinity" duration="0"/>
        <testCase name="validNumber should return false for NaN" duration="0"/>
        <testCase name="validNumber should return false for -Infinity" duration="0"/>
        <testCase name="validNumber should return false for null" duration="0"/>
        <testCase name="validNumber should return false for undefined" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/npc.test.ts">
        <testCase name="getRandomKinType should return kintype" duration="1"/>
        <testCase name="getRandomOccupation should return kintype" duration="0"/>
        <testCase name="getRandomCharacteristic should return kintype" duration="0"/>
        <testCase name="getRandomQuirk should return kintype" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/name.test.ts">
        <testCase name="name functions getVillageNameList should return Swedish list for sv" duration="1"/>
        <testCase name="name functions getVillageNameList should return English list for en" duration="0"/>
        <testCase name="name functions getVillageNameList should throw never error" duration="8"/>
        <testCase name="name functions getVillageNameList should throw never error" duration="0"/>
        <testCase name="name functions getVillageNameList should throw never error" duration="1"/>
        <testCase name="name functions getVillageNameList should throw never error" duration="0"/>
        <testCase name="name functions getVillageNameList should throw never error" duration="0"/>
        <testCase name="name functions capitalize should return English names for en" duration="1"/>
        <testCase name="name functions capitalize should return Swedish names for sv" duration="0"/>
        <testCase name="name functions capitalize should return throw error for invalid input" duration="1"/>
        <testCase name="name functions capitalize should return Alderlander when given alderlander" duration="0"/>
        <testCase name="name functions capitalize should return A when given a" duration="0"/>
        <testCase name="name functions capitalize should return  when given " duration="0"/>
        <testCase name="name functions capitalize should return   when given  " duration="1"/>
        <testCase name="name functions formatVillageName should not put space between prefix and suffix" duration="0"/>
        <testCase name="name functions formatVillageName should put space between prefix and suffix, and title case" duration="0"/>
        <testCase name="name functions getNameTypeAndFirstName should return the correct type" duration="1"/>
        <testCase name="name functions getRandomAilanderName should return family names" duration="0"/>
        <testCase name="name functions getRandomAilanderName should return home names" duration="0"/>
        <testCase name="name functions getRandomAilanderName should return firstnames" duration="0"/>
        <testCase name="name functions getRandomAlderlanderarName should return family names" duration="0"/>
        <testCase name="name functions getRandomAlderlanderarName should return firstname if familynames is empty" duration="0"/>
        <testCase name="name functions getRandomAlderlanderarName should return firstname if familynames is undefined" duration="0"/>
        <testCase name="name functions getRandomAlderlanderarName should return home names" duration="0"/>
        <testCase name="name functions getRandomAlderlanderarName should return firstnames" duration="1"/>
        <testCase name="name functions getRandomAsleneName should return nick names" duration="0"/>
        <testCase name="name functions getRandomAsleneName should return first name if nicknames is undefined" duration="0"/>
        <testCase name="name functions getRandomAsleneName should return first name if nicknames is empty" duration="0"/>
        <testCase name="name functions getRandomAsleneName should return firstnames" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/data/random-monster.data.spec.ts">
        <testCase name="sizes smaller ones should return 1 STR for size Puny" duration="1"/>
        <testCase name="sizes smaller ones should return 2 STR for size Small" duration="0"/>
        <testCase name="sizes smaller ones should return 3 STR for size Average" duration="0"/>
        <testCase name="sizes smaller ones should return 4 STR for size Large" duration="0"/>
        <testCase name="sizes smaller ones should return 8 STR for size Big" duration="0"/>
        <testCase name="sizes larger ones should return 17 STR for size Huge" duration="0"/>
        <testCase name="sizes larger ones should return 36 STR for size Gigantic" duration="0"/>
        <testCase name="agility smaller ones should return 1 AGI for type Grazing" duration="0"/>
        <testCase name="agility smaller ones should return 2 AGI for type Herbivore" duration="0"/>
        <testCase name="agility smaller ones should return 2 AGI for type Gatherer" duration="2"/>
        <testCase name="agility smaller ones should return 4 AGI for type Scavenger" duration="0"/>
        <testCase name="agility smaller ones should return 5 AGI for type Predator" duration="0"/>
        <testCase name="agility smaller ones should return 8 AGI for type AggressivePredator" duration="0"/>
        <testCase name="movementTypes should have 36 choices" duration="1"/>
        <testCase name="monsterHomes should have 36 choices" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 0 for -1" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 0 for Infinity" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 0 for NaN" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 1 for 1" duration="1"/>
        <testCase name="defaultMovementDistanceFunction should return 1 for 2" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 2 for 3" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 2 for 4" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 3 for 5" duration="0"/>
        <testCase name="defaultMovementDistanceFunction should return 3 for 15" duration="0"/>
        <testCase name="monsterSkillValues should have 36 choices" duration="0"/>
        <testCase name="monsterSkillValues should have 36 choices" duration="0"/>
        <testCase name="monsterSkillValues should have 36 choices" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/functions/attributes.functions.test.ts">
        <testCase name="createAttributeViewModel NaN =&gt; %b" duration="1"/>
        <testCase name="createAttributeViewModel 0 =&gt; %b" duration="0"/>
        <testCase name="createAttributeViewModel 1 =&gt; %b" duration="0"/>
        <testCase name="createAttributeViewModel 2 =&gt; %b" duration="0"/>
        <testCase name="createAttributeViewModel NaN =&gt; %b" duration="0"/>
        <testCase name="createAttributeViewModel NaN =&gt; %b" duration="0"/>
        <testCase name="createAttributesViewModel NaN =&gt; %b" duration="0"/>
        <testCase name="createAttributesViewModel NaN =&gt; %b" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/functions/dice.functions.test.ts">
        <testCase name="dice functions countSuccesses 1 =&gt; %b" duration="1"/>
        <testCase name="dice functions countSuccesses 2 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 3 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 4 =&gt; %b" duration="1"/>
        <testCase name="dice functions countSuccesses 5 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 6 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 7 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 8 =&gt; %b" duration="3"/>
        <testCase name="dice functions countSuccesses 9 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 10 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 11 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 12 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 13 =&gt; %b" duration="0"/>
        <testCase name="dice functions countSuccesses 14 =&gt; %b" duration="0"/>
        <testCase name="dice functions choose [] =&gt; undefined" duration="0"/>
        <testCase name="dice functions choose [&quot;test&quot;] =&gt; string" duration="1"/>
        <testCase name="dice functions weightedRandom [{&quot;weight&quot;:0,&quot;type&quot;:&quot;hej&quot;}] =&gt; hej" duration="0"/>
        <testCase name="dice functions weightedRandom [{&quot;weight&quot;:-1,&quot;type&quot;:&quot;hej&quot;},{&quot;weight&quot;:100,&quot;type&quot;:&quot;då&quot;}] =&gt; då" duration="0"/>
        <testCase name="dice functions weightedRandomConsume [{&quot;weight&quot;:0,&quot;type&quot;:&quot;hej&quot;}] =&gt; [ [Object], [] ]" duration="1"/>
        <testCase name="dice functions weightedRandomConsume [{&quot;weight&quot;:-1,&quot;type&quot;:&quot;hej&quot;},{&quot;weight&quot;:100,&quot;type&quot;:&quot;då&quot;},{&quot;weight&quot;:-1,&quot;type&quot;:&quot;re&quot;}] =&gt; [ [Object], [Array] ]" duration="0"/>
        <testCase name="dice functions parseChoiceString &quot;1&quot; =&gt; [ 1 ]" duration="0"/>
        <testCase name="dice functions parseChoiceString &quot;1|2&quot; =&gt; [ 1, 2 ]" duration="1"/>
        <testCase name="dice functions parseChoiceString &quot;1^2|2|3&quot; =&gt; [ 1, 1, 2, 3 ]" duration="0"/>
        <testCase name="dice functions parseChoiceString &quot;1^2|2^0|3^1|4&quot; =&gt; [ 1, 1, 3, 4 ]" duration="1"/>
        <testCase name="dice functions parseD6String &quot;D6&quot; =&gt; 1" duration="0"/>
        <testCase name="dice functions parseD6String &quot;2D6&quot; =&gt; 2" duration="0"/>
        <testCase name="dice functions parseD6String &quot;4D6&quot; =&gt; 4" duration="0"/>
        <testCase name="dice functions parseD6String &quot;10D6&quot; =&gt; 10" duration="0"/>
        <testCase name="dice functions parseD6String &quot;123D6&quot; =&gt; 123" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/functions/math.functions.test.ts">
        <testCase name="math functions min min: 0, val: 0, should be: 0" duration="1"/>
        <testCase name="math functions min min: 0, val: -1, should be: 0" duration="0"/>
        <testCase name="math functions min min: 0, val: 2, should be: 2" duration="0"/>
        <testCase name="math functions min min: -10, val: -34, should be: -10" duration="0"/>
        <testCase name="math functions min min: 0, val: NaN, should be: 0" duration="1"/>
        <testCase name="math functions min min: 0, val: NaN, should throw error" duration="4"/>
        <testCase name="math functions min min: NaN, val: NaN, should throw error" duration="1"/>
        <testCase name="math functions min min: NaN, val: 0, should throw error" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: 0, should be: %i" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: -1, should be: %i" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: -4, should be: %i" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: 2, should be: %i" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: 3, should be: %i" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: NaN, should be: %i" duration="0"/>
        <testCase name="math functions isEven min: NaN, val: NaN, should be: %i" duration="0"/>
        <testCase name="math functions isEven should throw error if given NaN" duration="1"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/characteristics.test.ts">
        <testCase name="getChacteristics should have 36 occupations" duration="1"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/models/map.model.test.ts">
        <testCase name="isHexKey should return true for key: A2" duration="1"/>
        <testCase name="isHexKey should return false for key: A3" duration="0"/>
        <testCase name="isHexKey should return true for key: B3" duration="0"/>
        <testCase name="isHexKey should return false for key: B4" duration="0"/>
        <testCase name="isHexKey should return false for key: Y162" duration="0"/>
        <testCase name="isHexKey should return true for key: W20" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/functions/encounter.functions.test.ts">
        <testCase name="Encounter Functions getTerrainsByEncounterId should all terrain keys if given 0" duration="1"/>
        <testCase name="Encounter Functions getTerrainsByEncounterId should all terrain keys if given 1" duration="0"/>
        <testCase name="Encounter Functions getTerrainsByEncounterId should all terrain keys if given %s" duration="0"/>
        <testCase name="Encounter Functions getEncounterById should all terrain keys if given %s" duration="1"/>
        <testCase name="Encounter Functions getRandomEncounter should return encounter 0 if roll is -1" duration="0"/>
        <testCase name="Encounter Functions getRandomEncounter should return encounter 0 if roll is 6" duration="0"/>
        <testCase name="Encounter Functions getRandomEncounter should return encounter 16 if roll is 42" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/functions/skills.functions.test.ts">
        <testCase name="defaultSkillsValues should return 16 skills" duration="1"/>
        <testCase name="createAllSkillsValuesViewModel should return empty array if all skill values are 0" duration="0"/>
        <testCase name="createAllSkillsValuesViewModel should return non-zero skill values" duration="0"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/quirk.test.ts">
        <testCase name="getQuirk should have 36 occupations" duration="1"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/occupation.test.ts">
        <testCase name="getOccupations should have 36 occupations" duration="1"/>
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/weapon.test.ts">
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/typical-kin.test.ts">
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/shield.test.ts">
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/armor.test.ts">
    </file>
    <file path="/Users/syradar/repos/yxans-klagan/src/pages/npc/NameList.test.tsx">
        <testCase name="NameList should render" duration="7"/>
        <testCase name="NameList should render names" duration="8"/>
    </file>
</testExecutions>